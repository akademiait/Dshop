"""
Django settings for Dshop project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import json
import logging
import os
from pathlib import Path

import sentry_sdk
from decouple import config
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.logging import LoggingIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

IS_AWS_LAMBDA = os.getenv("IS_AWS_LAMBDA", False)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = config('DEBUG')
if IS_AWS_LAMBDA:
    DEBUG = False


# SECURITY WARNING: don't run with debug turned on in production!

if IS_AWS_LAMBDA:
    ALLOWED_HOSTS = [".execute-api.eu-west-1.amazonaws.com"]
else:
    ALLOWED_HOSTS = json.loads(config('ALLOWED_HOSTS'))

# Application definition
PROJECT_APPS = [
    "apps.core",
    "apps.users",
    "apps.products_catalogue",
    "apps.payments.apps.PaymentsConfig",
    "dj_shop_cart",
]

SITE_ID = 1


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sitemaps',
    'django.contrib.sites',
    'sorl.thumbnail',
    'tinymce',
    'rest_framework',
    'rest_framework.authtoken',
    'drf_spectacular',
    'django_filters',
    'storages',
] + PROJECT_APPS


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = "Dshop.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                # "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "apps.core.context_processors.add_variable_to_context",
                # If you want access to the cart instance in all templates
                "dj_shop_cart.context_processors.cart",
            ],
        },
    },
]


WSGI_APPLICATION = "Dshop.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Postgrerss config

# DATABASES = {
#     "default": {
#         "ENGINE": config('POSTGRES_ENGINE'),
#         "NAME": config('POSTGRES_DATABASE'),
#         "USER": config('POSTGRES_USER'),
#         "PASSWORD": config('POSTGRES_PASSWORD'),
#         "HOST": config('POSTGRES_HOST'),
#         "PORT": config('POSTGRES_PORT'),
#     }
# }

# AWS postgres
if IS_AWS_LAMBDA:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql_psycopg2",
            "NAME": "zappa_dev",
            "USER": "postgres",
            "PASSWORD": "this_is_not_a_good_password",
            "HOST": "zappa-dev.cf8iw6846e7t.eu-west-1.rds.amazonaws.com",
            "PORT": "5432",
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
STATIC_ROOT = os.path.join(BASE_DIR, 'media/static/')

if IS_AWS_LAMBDA:
    DEFAULT_ACL = 'public-read'
    STORAGE_BUCKET_NAME = 'dshop-media-pesentation'
    # sadly, seems required for thumbnails, despite django changes
    AWS_STORAGE_BUCKET_NAME = STORAGE_BUCKET_NAME
    S3_CUSTOM_DOMAIN = f'{STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    LOCATION = "static"
    STORAGES = {
        "staticfiles": {
            "BACKEND": 'storages.backends.s3.S3Storage',
            "OPTIONS": {
                "default_acl": DEFAULT_ACL,
                "bucket_name": STORAGE_BUCKET_NAME,
                "custom_domain": S3_CUSTOM_DOMAIN,
                "object_parameters": {
                    'CacheControl': 'max-age=86400',
                },
                "location": LOCATION,
            },
        },
        "default": {
            "BACKEND": "storages.backends.s3.S3Storage",
            "OPTIONS": {
                "default_acl": DEFAULT_ACL,
                "bucket_name": STORAGE_BUCKET_NAME,
                "custom_domain": S3_CUSTOM_DOMAIN,
                "object_parameters": {
                    'CacheControl': 'max-age=86400',
                },
                "location": "media",
            },
        },
    }
    STATIC_URL = f'https://{S3_CUSTOM_DOMAIN}/{LOCATION}/'
    MEDIA_URL = f'https://{S3_CUSTOM_DOMAIN}/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
LOGIN_URL = 'login'

# Settings added manually

# Uncomment for authentication
# AUTH_USER_MODEL = 'core.User'

STRIPE_PUBLISHABLE_KEY = config('STRIPE_PUBLISHABLE_KEY')
STRIPE_SECRET_KEY = config('STRIPE_SECRET_KEY')
STRIPE_ENDPOINT_SECRET = config('STRIPE_ENDPOINT_SECRET')


THUMBNAIL_PREFIX = 'cache/'


TINYMCE_DEFAULT_CONFIG = {
    "theme": "silver",
    "width": 500,
    "height": 300,
    "menubar": False,
    "plugins": "lists",
    "toolbar": " formatselect  | bold italic | bullist ",
}

CART_STORAGE_BACKEND = "dj_shop_cart.storages.DBStorage"

# django-rest-framework
# -------------------------------------------------------------------------------
# django-rest-framework - https://www.django-rest-framework.org/api-guide/settings/
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_THROTTLE_RATES": {
        # 'registration': '3/day'
    },
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 25,
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
}

# drf_spectacular
# -------------------------------------------------------------------------------
# drf_spectacular -  https://drf-spectacular.readthedocs.io/en/latest/settings.html#settings
SPECTACULAR_SETTINGS = {
    "TITLE": "dshop API",
    "DESCRIPTION": "Documentation of API endpoints of dshop",
    "VERSION": "1.0.0",
    "SERVE_PERMISSIONS": ["rest_framework.permissions.IsAdminUser"],
    "SERVE_INCLUDE_SCHEMA": False,
}

# Sentry
SENTRY_DSN = config(
    "SENTRY_DSN",
    default='https://545276765834eb4685af9a56c4fad326@o4506418469928960.ingest.sentry.io/4506418471632896',
)
SENTRY_LOG_LEVEL = config("DJANGO_SENTRY_LOG_LEVEL", logging.INFO)

sentry_logging = LoggingIntegration(
    level=SENTRY_LOG_LEVEL,  # Capture info and above as breadcrumbs
    event_level=logging.ERROR,  # Send errors as events
)

integrations = [sentry_logging, DjangoIntegration()]
sentry_sdk.init(
    dsn=SENTRY_DSN,
    integrations=integrations,
    environment=config("SENTRY_ENVIRONMENT", default="local"),
    traces_sample_rate=config("SENTRY_TRACES_SAMPLE_RATE", default=0.0),
)
